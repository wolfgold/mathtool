//结构体表示
digraph st2{
  fontname = "Verdana";
  fontsize = 10;
  rankdir=TB;

  node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record"];

  edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];

  st_hash_type [label="{<head>st_hash_type|(*compare)|(*hash)}"];
  st_table_entry [label="{<head>st_table_entry|hash|key|record|<next>next}"];
  st_table [label="{st_table|<type>type|num_bins|num_entries|<bins>bins}"];

  st_table:bins -> st_table_entry:head;
  st_table:type -> st_hash_type:head;
  st_table_entry:next -> st_table_entry:head [style="dashed", color="forestgreen"];
}
//构造一个HASH 表
digraph G {
    nodesep=.05;
    rankdir=LR;
    node [shape=record,width=.1,height=.1];

    node0 [label = "<f0> |<f1> |<f2> |<f3> |<f4> |<f5> |<f6> | ",height=2.5];
    node [width = 1.5];
    node1 [label = "{<n> n14 | 719 |<p> }"];
    node2 [label = "{<n> a1 | 805 |<p> }"];
    node3 [label = "{<n> i9 | 718 |<p> }"];
    node4 [label = "{<n> e5 | 989 |<p> }"];
    node5 [label = "{<n> t20 | 959 |<p> }"] ;
    node6 [label = "{<n> o15 | 794 |<p> }"] ;
    node7 [label = "{<n> s19 | 659 |<p> }"] ;

    node0:f0 -> node1:n;
    node0:f1 -> node2:n;
    node0:f2 -> node3:n;
    node0:f5 -> node4:n;
    node0:f6 -> node5:n;
    node2:p -> node6:n;
    node4:p -> node7:n;
}
digraph html {
    node[shape = box];
    c:n -> d[label = n];
    c1:ne -> d1[label = ne];
    c2:e -> d2[label = e];
    b:se -> a[label = se];
    c3:s -> d3[label = s];
    c4:sw -> d4[label = sw];
    c5:w -> d5[label = w];
    c6:nw -> d6[label = nw];
}
//
digraph html {
    rankdir = LR;
    {
        node[shape = plaintext];
        1995 -> 1996 -> 1997 -> 1998 -> 1999 -> 2000 -> 2001;
    }
    {
        node[shape = box, style = filled];
        WAR3 -> Xhero -> Footman -> DOTA;
        WAR3 -> Battleship;
    }
    {rank = same; 1996; WAR3;}
    {rank = same; 1998; Xhero; Battleship;}
    {rank = same; 1999; Footman;}
    {rank = same; 2001; DOTA;}
}
//这样创造了一个5 行5 列的表格，我们可以在表格中打字。
digraph html {
    abc [shape=none, margin=0, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
    <TR><TD>0</TD><TD>1</TD><TD>2</TD><TD>3</TD><TD>4</TD>
    </TR>
    <TR><TD>1</TD><TD></TD><TD></TD><TD></TD><TD></TD>
    </TR>
    <TR><TD>2</TD><TD></TD><TD></TD><TD></TD><TD></TD>
    </TR>
    <TR><TD>3</TD><TD></TD><TD></TD><TD></TD><TD></TD>
    </TR>
    <TR><TD>4</TD><TD></TD><TD></TD><TD></TD><TD></TD>
    </TR>
    </TABLE>>];
}

//在dot 中我们可以用html 语言写一个table。在label 后用< >而不是""就能引入html 语言。
digraph html {
    abc [shape=none, margin=0, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
    <TR><TD ROWSPAN="3"><FONT COLOR="red">hello</FONT><BR/>world</TD>
    <TD COLSPAN="3">b</TD>
    <TD ROWSPAN="3" BGCOLOR="lightgrey">g</TD>
    <TD ROWSPAN="3">h</TD>
    </TR>
    <TR><TD>c</TD>
    <TD PORT="here">d</TD>
    <TD>e</TD>
    </TR>
    <TR><TD COLSPAN="3">f</TD>
    </TR>
    </TABLE>>];
}
//record 和Mrecord 的区别就是Mrecord 的角是圆的。Record 就是由衡的和竖的矩形组成的图形。
digraph structs {
    node [shape=record];
    struct1 [shape=record,label="<f0> left|<f1> mid\ dle|<f2> right"];
    struct2 [shape=record,label="<f0> one|<f1> two"];
    struct3 [shape=record,label="hello\nworld |{ b |{c|<here> d|e}| f}| g | h"];
    struct1 -> struct2;
    struct1 -> struct3;
}
//可以设置每条边箭头的方向，用dir，有forward(default)，back，both，none 四种。
digraph html {
    A -> B[dir = both];
    B -> C[dir = none];
    C -> D[dir = back];
    D -> A[dir = forward];
}

//点的默认参数是shape=ellipse, width=.75, height=.5 and labeled by the node name.
//一些点的形状在appendix.h 中，一些常用的形状有bos,circle,record,plaintext。
digraph G {
    size ="4,4";// 把图的尺寸设为4 inch，4 inch
    main [shape=box];//把main点的形状设为方形
    main -> parse [weight=8]; //weight是设置了这条边的重要程度，默认是1。
    parse -> execute;
    main -> init [style=dotted]; //让这条线是点状的
    main -> cleanup;
    execute -> { make_string; printf} //这条语句一次连了两条线
    init -> make_string;
    edge [color=red]; // so is this 把边的默认颜色设为了red
    main -> printf [style=bold,label="100 times"]; //label就是在边上写了一行字
    make_string [label="make a\nstring"];// 让make_string变成了一个两行的字符串（注意那个\n）。
    node [shape=box,style=filled,color=".7 .3 1.0"];// 设置了一下点的默认参数，蓝色，这个被用在了compare中。
    execute -> compare;
}